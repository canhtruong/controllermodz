<style type="text/css">
	.import_wrap {
  border: 1px solid #dedede;
  width: 100%;
  float: left;
  padding: 50px;
}
.import_left, .import_right {
  width: 50%;
  float: left;
  text-align: center;
}
#files {
  width: 300px;
  margin: auto;
}
#myInputautocomplete-list div {
  width: 300px;
  text-align: left;
  margin: auto;
  cursor: pointer;
  padding: 1px 5px;
}
#myInputautocomplete-list div:hover {
  background: #196d39;
  color: #fff;
}
#myInput{ width: 300px;height: 34px;font-size: 16px; }
.autocomplete{ width:100%; }
.cwsFiles{ display:none; }
</style>
<script type="text/javascript">
	var countries = [];
</script>
<div class="import_wrap">
	<form method="post" action="<?php echo $block->getUrl('dsfhcustomer/dailys/importpost') ?>" id="import_edit_form" enctype="multipart/form-data">
	<div class="import_left">
		<div class="autocomplete">
	    <input id="myInput" type="text" name="myCountry" placeholder="<?php echo __("Please fill a customer name"); ?>">
	  </div>
		<select id="files" name="file_customer" class="option-control cwsFiles">
			<option value=""><?php echo __("Please Select a customer"); ?></option>
		<?php
			$objectManager = \Magento\Framework\App\ObjectManager::getInstance();
			$customerObj = $objectManager->create('Magento\Customer\Model\Customer')->getCollection();
			$list_cu = array();
			foreach($customerObj as $customerObjdata )
			{ ?>
				<script type="text/javascript">
					countries['canhtn<?php echo $customerObjdata->getId() ?>'] = "<?php echo $customerObjdata->getName() ?>";
				</script>
				<option value="<?php echo $customerObjdata->getId(); ?>"><?php echo $customerObjdata->getName(); ?></option>
		<?php } ?>
		</select>
	</div>
	<div class="import_right">
		<input name="form_key" type="hidden" value="<?php echo $block->getFormKey() ?>" />
		<div class="entry-edit form-inline">
			<span style="margin-right: 15px;"><?php echo __("Upload file") ?></span>
			<input type="file" class="input-file required-entry _required" title="Select File to Import" value=""  name="filename" id="filename" >		
			<div class="admin__field field field-filename"></div>
		</div>
	</div>
	
	<input type="submit" value="Import" style="height: 35px;width: 130px;background: #eb5202;color: #fff;/*! font-weight: bold; */border: #eb5202;font-size: 1.6rem;float: right;margin-top: 65px;" />
	</form>
</div>

<script type="text/javascript">

	function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (var key in arr) {
        /*check if the item starts with the same letters as the text field value:*/
        texttofind = arr[key].toUpperCase();
        texttofind = texttofind.replace(val.toUpperCase(),"");

        if (arr[key].toUpperCase().length == texttofind.length) {} else {
          /*create a DIV element for each matching element:*/
          resultsl = arr[key].toUpperCase().indexOf(val.toUpperCase());
          textffin = "<strong>" + arr[key].substr(resultsl, val.length) + "</strong>";
          textnews = arr[key].replace(arr[key].substr(resultsl, val.length), "<strong>" + arr[key].substr(resultsl, val.length) + "</strong>");
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = textnews;
          /*insert a input field that will hold the current array item's value:*/
          idcus = key.replace("canhtn","");
          b.innerHTML += "<input data-cusid='" + idcus + "' type='hidden' value='" + arr[key] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              jQuery("#files").val(this.getElementsByTagName("input")[0].getAttribute('data-cusid'));
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
} 

autocomplete(document.getElementById("myInput"), countries);
</script>